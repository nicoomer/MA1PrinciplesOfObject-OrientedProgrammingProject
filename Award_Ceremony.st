Object subclass: #Ceremony	instanceVariableNames: 'ceremonyName awardCategorySet'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!Ceremony commentStamp: 'NicolasOmer 8/16/2015 18:02' prior: 0!A Ceremony has ceremonyName and consist of aSet of AwardCategory.Instance Variables	awardCategorySet:		<aSet AwardCategory>	ceremonyName:		<String>awardCategorySet	- aSet of AwardCategoryceremonyName	- Name of the Ceremony!!Ceremony methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:43'!addAwardCategory: anAwardCategory	"Adds anAwardCategory to the awardCategorySet"	awardCategorySet add: anAwardCategory.	^ self! !!Ceremony methodsFor: 'initialization' stamp: 'NicolasOmer 8/10/2015 22:43'!initialize	"Initialize the myCeremonyName and awardCategorySet instance variables when instanciating a new Ceremony"	super initialize.	ceremonyName := ''.	awardCategorySet := Set new! !!Ceremony methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:21'!ceremonyName: anObject	ceremonyName := anObject! !!Ceremony methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:09'!awardCategorySet	^ awardCategorySet! !!Ceremony methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:21'!ceremonyName	^ ceremonyName! !!Ceremony methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:09'!awardCategorySet: anObject	awardCategorySet := anObject! !!Ceremony methodsFor: 'operations' stamp: 'NicolasOmer 8/12/2015 16:28'!declareWinners	"Announce the winners of the ceremony, can only be done when juries are done voting"	| winnerSet winnersString |	self areVotesDone		ifFalse: [ 			Transcript				show: '=> ERROR : Some Jury have not finished voting.';				cr.			^ self ].	winnersString := ''.	awardCategorySet		do: [ :each | 			winnerSet := each determineWinners.			winnerSet size = 1				ifTrue: [ 					winnerSet asArray first addAwardWon: each.					Transcript show: winnerSet asArray first nomineeName , ' is the winner for the ' ]				ifFalse: [ 					winnerSet						do: [ :eachWinner | 							winnersString := winnersString , ' ' , eachWinner asString.							eachWinner addAwardWon: each ].					Transcript show: 'It is a tie between : ' , winnersString , ' for the ' ].			Transcript show: each awardCategoryName , ' award category'; cr.			each isForNewComers				ifTrue: [ 					Transcript						show: ' as newcomer !!';						cr ] ].	^ self! !!Ceremony methodsFor: 'testing' stamp: 'NicolasOmer 8/12/2015 11:08'!areAwardCategoriesFull	"Checks if the nomineeSet of each AwardCategory in awardCategorySet is full"	| bool |	bool := true.	awardCategorySet do: [ :awardCategory | bool := bool & (awardCategory isNomineeSetFull) ].	^ bool! !!Ceremony methodsFor: 'testing' stamp: 'NicolasOmer 8/12/2015 11:17'!areVotesDone	"Checks if the juryVoteDico of the awardCategoryJury of each AwardCategory in awardCategorySet is full"	| bool |	bool := true.	awardCategorySet do: [ :awardCategory | bool := bool & (awardCategory awardCategoryJury isVotingDone) ].	^ bool! !!Ceremony methodsFor: 'testing' stamp: 'NicolasOmer 8/12/2015 16:30'!isStartingCeremonyPossible	"Checks if the ceremony respects the constraints before the votes"	(awardCategorySet isEmpty)	ifTrue: [ 		Transcript show: '=> ERROR : There are no award categories in the ', self ceremonyName, ' ceremony.' ; cr. 		^self. ].	(self areJuriesFull)	ifFalse: [ 		Transcript show: '=> ERROR : Some juries of some award categories are not full.' ; cr. 		^self].	(self areAwardCategoriesFull)	ifFalse: [ 		Transcript show: '=> ERROR : Some award categories do not have their 5 nominees.' ; cr.		^self].		Transcript show: 'The votes for the ', self ceremonyName, ' ceremony can begin right now !!' ; cr.		^self.! !!Ceremony methodsFor: 'testing' stamp: 'NicolasOmer 8/12/2015 11:08'!areJuriesFull	"Checks if the awardCategoryJury of each AwardCategory in awardCategorySet is full"	| bool |	bool := true.	awardCategorySet do: [ :awardCategory | bool := bool & (awardCategory awardCategoryJury isJuryFull) ].	^ bool! !!Ceremony methodsFor: 'test - printing' stamp: 'NicolasOmer 8/12/2015 11:03'!printAttributes	"test - printing message"	Transcript		show: 'ceremonyName : ' , self ceremonyName asString;		cr.	Transcript		show: 'awardCategorySet : ' , self awardCategorySet asArray asString;		cr! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ceremony class	instanceVariableNames: ''!!Ceremony class commentStamp: '<historical>' prior: 0!!!Ceremony class methodsFor: 'instance creation' stamp: 'NicolasOmer 8/10/2015 23:22'!ceremonyName: aCeremonyName	| anObject |	anObject := self new		ceremonyName: aCeremonyName;		yourself.	Transcript		show: 'Created ' , anObject ceremonyName asString , ' ceremony';		cr.	^ anObject! !Object subclass: #Nominee	instanceVariableNames: 'nomineeName activeSince awardWonSet isNewComer'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!Nominee commentStamp: 'NicolasOmer 8/16/2015 18:01' prior: 0!A Nominee has a nomineeName, isNewComer or not, is activeSince a Year and aSet of awards he won.Instance Variables	activeSince:		<SmallInteger>	awardWonSet:		<aSet>	isNewComer:		<Boolean>	nomineeName:		<String>activeSince	- Year since his first activityawardWonSet	- aSet of Awards he wonisNewComer	- Boolean, True if (DateAndTime now year - activeSince < 3)nomineeName	- Name of the Nominee!!Nominee methodsFor: 'initialization' stamp: 'NicolasOmer 8/10/2015 22:45'!initialize	"Initialize the nomineeName, activeSince, awardWonSet and isNewComer instance variables when instanciating a new Nominee"	super initialize.	nomineeName := ''.	activeSince := DateAndTime new year.	awardWonSet := Set new.	isNewComer := DateAndTime now year - activeSince < 3! !!Nominee methodsFor: 'test - printing' stamp: 'NicolasOmer 8/12/2015 11:03'!printAttributes	"test - printing message"	Transcript		show: 'activeSince : ' , self activeSince asString asString;		cr.	Transcript		show: 'awardWonSet : ' , self awardWonSet asArray asString;		cr.	Transcript		show: 'nomineeName : ' , self nomineeName asString;		cr.	Transcript		show: 'isNewComer : ' , self isNewComer asString;		cr! !!Nominee methodsFor: 'nominating' stamp: 'NicolasOmer 8/11/2015 17:31'!nominateForMixedAwardCategory: aMixedAwardCategory	"Nominate aNominee for aMixedAwardCategory"	self subclassResponsibility! !!Nominee methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:45'!nominateForIndividualArtistAwardCategory: anAwardCategory	"Nominate aNominee for anAwardCategory"	self subclassResponsibility! !!Nominee methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:45'!nominateForBandAwardCategory: anAwardCategory	"Nominate aNominee for anAwardCategory"	self subclassResponsibility! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:17'!activeSince	^ activeSince! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/9/2015 23:24'!isNewComer: anObject	isNewComer := anObject! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/11/2015 16:48'!awardWonSet: anObject	awardWonSet := anObject! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:17'!activeSince: anObject	activeSince := anObject! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:17'!nomineeName: anObject	nomineeName := anObject! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/11/2015 19:54'!awardWonSet	^awardWonSet! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:17'!nomineeName	^ nomineeName! !!Nominee methodsFor: 'accessing' stamp: 'NicolasOmer 8/9/2015 23:24'!isNewComer	^ isNewComer! !!Nominee methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:45'!addToJury: aJury	"Tries to add aNominee to aJury"	self subclassResponsibility! !!Nominee methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:45'!addToBand: aBand role: aRole	"Tries to Add aNominee to a aBand as a aRole"	self subclassResponsibility! !!Nominee methodsFor: 'adding' stamp: 'NicolasOmer 8/11/2015 09:48'!addAwardWon: anAwardCategory	"Adds anAwardCategory to the awardWonSet"	awardWonSet add: anAwardCategory.	^ self! !!Nominee methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:45'!addIndividualArtist: anIndividualArtist role: aRole	"Tries to Adds anIndividualArtist to a aBand as a aRole"	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Nominee class	instanceVariableNames: ''!!Nominee class commentStamp: '<historical>' prior: 0!!!Nominee class methodsFor: 'instance creation' stamp: 'NicolasOmer 8/11/2015 16:53'!name: aNomineeName activeSince: aYear	| anObject |	anObject := self new		nomineeName: aNomineeName;		activeSince: aYear;		isNewComer: DateAndTime now year - aYear < 3;		yourself.	Transcript		show: 'Created ' , anObject nomineeName asString , ', active since ' , anObject activeSince asString;		cr.	^ anObject! !Object subclass: #AwardCategory	instanceVariableNames: 'awardCategoryName nomineeSet awardCategoryJury isForNewComers'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!AwardCategory commentStamp: 'NicolasOmer 8/16/2015 18:02' prior: 0!An AwardCategory is has a awardCategoryName, isForNewComers or not, has aSet of nominees and an AwardCategory Jury.Instance Variables	awardCategoryJury:	<Jury>	awardCategoryName:	<String>	isForNewComers:		<Boolean>	nomineeSet:			<aSet Nominee>awardCategoryJury	- Jury of AwardCategoryawardCategoryName	- Name of the AwardCategoryisForNewComers	- Boolean, true if the AwardCategory is for newcomersnomineeSet	- aSet of Nominee in the AwardCategory!!AwardCategory methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:43'!addNominee: aNominee	"Adds aNominee to the nomineeSet"	nomineeSet add: aNominee.	^ self! !!AwardCategory methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:42'!nominate: aNominee	"Tries to nominate aNominee for self"	self subclassResponsibility! !!AwardCategory methodsFor: 'initialization' stamp: 'NicolasOmer 8/12/2015 16:06'!initialize	"Initialize the awardCategoryName, nomineeSet, awardCategoryJury and isForNewComers instance variables when instanciating a new AwardCategory"	super initialize.	awardCategoryName := ''.	nomineeSet := Set new.	awardCategoryJury := Jury new.	isForNewComers := false! !!AwardCategory methodsFor: 'test - printing' stamp: 'NicolasOmer 8/12/2015 11:03'!printAttributes	"test - printing message"	Transcript		show: 'awardCategoryName : ' , self awardCategoryName asString;		cr.	Transcript		show: 'nomineeSet : ' , self nomineeSet asArray asString;		cr.	Transcript		show: 'awardCategoryJury : ' , self awardCategoryJury asArray asString;		cr.	Transcript		show: 'isForNewComers : ' , self isForNewComers asString;		cr! !!AwardCategory methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:42'!includesNominee: aNominee	"Checks if the nomineeSet includes aNominee"	^ self nomineeSet includes: aNominee! !!AwardCategory methodsFor: 'testing' stamp: 'NicolasOmer 8/11/2015 16:44'!isNominationPossible: aNominee	"Checks if the nomination of aNominee respects the constraints"	| bool |	bool := true.	self isNomineeSetFull		ifTrue: [ 			Transcript				show: '=> ERROR : There are already 5 nominees for the ' , self awardCategoryName , ' award category';				cr.			bool := false ].	(self includesNominee: aNominee)		ifTrue: [ 			Transcript				show:						'=> ERROR : The individual artist ' , aNominee nomineeName , ' is already nominated for the ' , self awardCategoryName								, ' award category';				cr.			bool := false ].	(self awardCategoryJury includesJuryMember: aNominee)		ifTrue: [ 			Transcript				show:						'=> ERROR : The individual artist ' , aNominee nomineeName , ' is a jury member for the ' , self awardCategoryName								, ' award category';				cr.			bool := false ].	self isForNewComers & aNominee isNewComer not		ifTrue: [ 			Transcript				show:						'=> Error : ' , aNominee nomineeName , ' is already active too long in order to be eligible for a newcomer award. ';				cr.			bool := false ].	self isForNewComers not & aNominee isNewComer		ifTrue: [ 			Transcript				show: '=> Error : ' , self awardCategoryName , ' is not for newcomers and ' , aNominee nomineeName , ' is one.';				cr.			bool := false ].	^ bool! !!AwardCategory methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:42'!isNomineeSetFull	"True if the nomineeSet already contains 5 Nominees"	^ self nomineeSet size = 5! !!AwardCategory methodsFor: 'operations' stamp: 'NicolasOmer 8/12/2015 16:27'!determineWinners	"Determine the winners of the award category according to the votes"	| maxVote tempDico winnerSet possibleWinnerArray |	maxVote := 0.	winnerSet := Set new.	tempDico := Dictionary new.	possibleWinnerArray := awardCategoryJury juryVoteDico asSet asArray.	possibleWinnerArray do: [ :each | tempDico at: each put: (awardCategoryJury juryVoteDico occurrencesOf: each) ].	tempDico valuesDo: [ :each | maxVote := maxVote max: each ].	tempDico		keysAndValuesDo: [ :key :value | 			value = maxVote				ifTrue: [ winnerSet add: key ] ].	^ winnerSet! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 18:39'!awardCategoryJury: anObject	awardCategoryJury := anObject! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 21:58'!nomineeSet	^ nomineeSet! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:23'!awardCategoryName	^ awardCategoryName! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 16:23'!awardCategoryName: anObject	awardCategoryName := anObject! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:42'!nomineeSet: anObject	nomineeSet := anObject! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 18:39'!awardCategoryJury	^ awardCategoryJury! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 21:58'!isForNewComers: anObject	isForNewComers := anObject! !!AwardCategory methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 21:58'!isForNewComers	^ isForNewComers! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AwardCategory class	instanceVariableNames: ''!!AwardCategory class commentStamp: '<historical>' prior: 0!!!AwardCategory class methodsFor: 'instance creation' stamp: 'NicolasOmer 8/10/2015 23:22'!name: anAwardCategoryName openForNewComers: openForNewComers	| anObject |	anObject := self new		awardCategoryName: anAwardCategoryName;		isForNewComers: openForNewComers;		yourself.	Transcript		show: 'Created ' , anObject awardCategoryName , ' award category';		cr.	^ anObject! !AwardCategory subclass: #MixedAwardCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!MixedAwardCategory commentStamp: 'NicolasOmer 8/10/2015 22:23' prior: 0!A MixedAwardCategory is an AwardCategory for Nominees, has a awardCategoryName, aSet of maximum 5 Nominees, a Jury and isForNewComers or not.!!MixedAwardCategory methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:43'!nominate: aNominee	"Tries to nominates aNominee for self"	(self isNominationPossible: aNominee)		ifTrue: [ aNominee nominateForMixedAwardCategory: self ]		ifFalse: [ ^ self ]! !Nominee subclass: #Band	instanceVariableNames: 'individualArtistDico'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!Band commentStamp: 'NicolasOmer 8/10/2015 22:51' prior: 0!A Band has a nomineeName, is activeSince a year, has aSet of aAwardCategory where he won, isNewComer or not and has a dictionary of IndividualArtist which belong to the band and their role in it.Instance Variables	dicoOfIndividualArtists:		<aDictionary IndividualArtist-Role>individualArtistDico	- aDictionary of IndividualArtist which belong to the band and their role in it.!!Band methodsFor: 'nominating' stamp: 'NicolasOmer 8/11/2015 17:31'!nominateForMixedAwardCategory: aMixedAwardCategory	"Nominate aNominee for aMixedAwardCategory"	self nominateForBandAwardCategory: aMixedAwardCategory! !!Band methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 23:26'!nominateForIndividualArtistAwardCategory: anIndividualArtistAwardCategory	"Tries to nominate self for anIndividualArtistAwardCategory"	Transcript		show:				'=> ERROR : Cannot nominate ' , self nomineeName , ' for the ' , anIndividualArtistAwardCategory awardCategoryName						, ' award category since it is a band.';		cr.	^ self! !!Band methodsFor: 'nominating' stamp: 'NicolasOmer 8/11/2015 18:24'!nominateForBandAwardCategory: aBandAwardCategory	"Nominates self for anAwardCategory"	| individualArtistSet bool |	bool := true.	individualArtistSet := self getIndividualArtistSet.	individualArtistSet		do: [ :eachArtist | bool := bool & (aBandAwardCategory awardCategoryJury includesJuryMember: eachArtist) not ].	bool		ifTrue: [ 			Transcript				show:						'The Band : ' , self nomineeName , ' was nominated for the ' , aBandAwardCategory awardCategoryName , ' award category.';				cr.			aBandAwardCategory addNominee: self ]		ifFalse: [ 			Transcript				show:						'=> ERROR : The Band : ' , self nomineeName , ' has a member that is in the jury of the ' , aBandAwardCategory awardCategoryName								, ' award category.';				cr ].	^ self! !!Band methodsFor: 'initialization' stamp: 'NicolasOmer 8/10/2015 22:47'!initialize	"Initialize the individualArtistDico instance variable when instanciating a new Band"	super initialize.	individualArtistDico := Dictionary new! !!Band methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:46'!addToJury: aJury	"Tries to add self to aJury"	Transcript		show: '=> ERROR : Bands cannot be jury members';		cr.	^ self! !!Band methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 23:31'!addToBand: aBand role: aRole	"Tries to add aBand to the individualArtistDico of self"	Transcript		show: '=> ERROR : Cannot add the band : ' , aBand nomineeName , 'as an IndividualArtist of ' , self nomineeName;		cr.	^ self! !!Band methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 23:31'!addIndividualArtist: anIndividualArtist role: aRole	"Adds anIndividualArtist to the self individualArtistDico as a aRole"	individualArtistDico at: anIndividualArtist put: aRole.	Transcript		show:				'The individual artist ' , anIndividualArtist nomineeName , ' was added to ' , self nomineeName , ' as a ' , aRole;		cr! !!Band methodsFor: 'accessing' stamp: 'NicolasOmer 8/12/2015 11:25'!totalAwardsWon	"In the case of a band, this is the union of the awards won by the band and the awards won by the individual band members."	| individualArtistSet totalAwards |	totalAwards := self awardWonSet size.	individualArtistSet := self getIndividualArtistSet.	individualArtistSet do: [ :eachArtist | totalAwards := totalAwards + eachArtist awardWonSet size ].	^totalAwards! !!Band methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:29'!individualArtistDico: anObject	individualArtistDico := anObject! !!Band methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:29'!individualArtistDico	^ individualArtistDico! !!Band methodsFor: 'accessing' stamp: 'NicolasOmer 8/12/2015 16:33'!getIndividualArtistSet	"Returns the individualArtistDico as aSet"	^individualArtistDico keys asSet.! !AwardCategory subclass: #BandAwardCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!BandAwardCategory commentStamp: 'NicolasOmer 8/10/2015 22:22' prior: 0!A BandAwardCategory is an AwardCategory for Bands, has a awardCategoryName, aSet of maximum 5 Bands as nominees, a Jury and isForNewComers or not.!!BandAwardCategory methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:43'!nominate: aNominee	"Tries to nominate aNominee for self"	(self isNominationPossible: aNominee)		ifTrue: [ aNominee nominateForBandAwardCategory: self ]		ifFalse: [ ^ self ]! !Nominee subclass: #IndividualArtist	instanceVariableNames: 'jurySet bandDico'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!IndividualArtist commentStamp: 'NicolasOmer 8/10/2015 22:51' prior: 0!A IndividualArtist has a nomineeName, is activeSince a year, has aSet of aAwardCategory where he won, isNewComer or not, has aSet of maximum 3 Jury he belongs to and has a dictionary of Bands he belongs to and his role in it.Instance Variables	jurySet:		<aSet Jury>	bandDico:		<aDictionary Band-Role>			jurySet	- aSet of Jury to which the IndividualArtist belongs to (max 3).bandDico	- aDictionary of Band to which the IndividualArtist belongs to and his role in it.!!IndividualArtist methodsFor: 'initialization' stamp: 'NicolasOmer 8/10/2015 22:47'!initialize	"Initialize the jurySet and bandDico instance variables when instanciating a new Band"		super initialize.		jurySet := Set new.	bandDico := Dictionary new! !!IndividualArtist methodsFor: 'nominating' stamp: 'NicolasOmer 8/11/2015 17:30'!nominateForMixedAwardCategory: aMixedAwardCategory	"Nominate aNominee for aMixedAwardCategory"	self nominateForIndividualArtistAwardCategory: aMixedAwardCategory! !!IndividualArtist methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 23:26'!nominateForIndividualArtistAwardCategory: anIndividualArtistAwardCategory	"Nominates self for anIndividualArtistAwardCategory"	Transcript		show:				'The individual artist : ' , self nomineeName , ' was nominated for the '						, anIndividualArtistAwardCategory awardCategoryName , ' award category.';		cr.	anIndividualArtistAwardCategory addNominee: self! !!IndividualArtist methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 23:30'!nominateForBandAwardCategory: aBandAwardCategory	"Tries to Nominate self for aBandAwardCategory"	Transcript		show:				'=> ERROR : Cannot nominate ' , self nomineeName , ' for the ' , aBandAwardCategory awardCategoryName						, ' award category since it is a individual artist';		cr.	^ self! !!IndividualArtist methodsFor: 'adding' stamp: 'NicolasOmer 8/11/2015 17:04'!addToJury: aJury	"Tries to add self to aJury"	self isInLessThan3Juries		ifFalse: [ 			Transcript				show:						'=> ERROR : The individual artist : ' , self nomineeName , ' can only be in the jury of at most three award categories.';				cr.			^ self ].	jurySet add: aJury.	aJury juryMemberSet add: self.	Transcript		show:				'The individual artist ' , self nomineeName , ' was added in the jury of the ' , aJury awardCategory awardCategoryName						, ' award category.';		cr.	^ self! !!IndividualArtist methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 22:46'!addToBand: aBand role: aRole	"Adds self to the bandDico in aBand as a aRole"	self bandDico at: aBand put: aRole! !!IndividualArtist methodsFor: 'adding' stamp: 'NicolasOmer 8/10/2015 23:30'!addIndividualArtist: anIndividualArtist role: aRole	"Tries to add anIndividualArtist to the bandDico of self"	Transcript		show:				'=> ERROR : Cannot add the individual artist : ' , anIndividualArtist nomineeName , 'as an band of which ' , self nomineeName , ' belong to';		cr.	^ self! !!IndividualArtist methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:39'!jurySet	^ jurySet! !!IndividualArtist methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:39'!jurySet: anObject	jurySet := anObject! !!IndividualArtist methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:39'!bandDico: anObject	bandDico := anObject! !!IndividualArtist methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:39'!bandDico	^ bandDico! !!IndividualArtist methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:47'!isInLessThan3Juries	"Checks if self does not belong to more than 3 Juries"	^ self jurySet size < 3! !AwardCategory subclass: #IndividualArtistAwardCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!IndividualArtistAwardCategory commentStamp: 'NicolasOmer 8/10/2015 22:23' prior: 0!An IndividualArtistAwardCategory is an AwardCategory for IndividualArtists, has a awardCategoryName, aSet of maximum 5 IndividualArtists as nominees, a Jury and isForNewComers or not.!!IndividualArtistAwardCategory methodsFor: 'nominating' stamp: 'NicolasOmer 8/10/2015 22:43'!nominate: aNominee	"Tries to nominate aNominee for the self"	(self isNominationPossible: aNominee)		ifTrue: [ aNominee nominateForIndividualArtistAwardCategory: self ]		ifFalse: [ ^ self ]! !Object subclass: #Jury	instanceVariableNames: 'awardCategory juryMemberSet juryVoteDico'	classVariableNames: ''	poolDictionaries: ''	category: 'Award_Ceremony'!!Jury commentStamp: 'NicolasOmer 8/16/2015 17:59' prior: 0!A Jury is for an AwardCategory, consist of aSet of IndividualArtist and keeps the vote of the members in a juryVoteDico.Instance Variables	awardCategory:	<AwardCategory>	juryMemberSet:	<aSet IndividualArtist >	juryVoteDico:		<aDictionary IndividualArtist->Nominee>awardCategory	- AwardCategory the Jury belongs tojuryMemberSet	- aSet of IndividualArtist that compose the jury (5 MAX)juryVoteDico	- aDictionary to know which member vote for which Nominee!!Jury methodsFor: 'operations' stamp: 'NicolasOmer 8/11/2015 17:07'!member: aJuryMember isVotingFor: aNominee	"Add the vote for aNominee done by aJuryMember to the dicoJuryVote of MyJury"	"aJuryMember is not in the Jury for this category"	(self includesJuryMember: aJuryMember)		ifFalse: [ 			Transcript				show:						'=> ERROR : The individual artist ' , aJuryMember nomineeName , ' is not in the Jury in the '								, awardCategory awardCategoryName , ' award category.';				cr.			^ self ].	"aNominee is not nominated for this category"	(self awardCategory includesNominee: aNominee)		ifFalse: [ 			Transcript				show:						'=> ERROR : The individual artist ' , aNominee nomineeName , ' is not nominated in the '								, awardCategory awardCategoryName , ' award category.';				cr.			^ self ].	"aJuryMember has already voted"	(self hasJuryMemberVoted: aJuryMember)		ifTrue: [ 			Transcript				show: '=> ERROR : The individual artist ' , aJuryMember nomineeName , ' has already voted for in the ' , awardCategory awardCategoryName , ' award category.';				cr.			^ self ].	"Otherwise, remember that aJuryMember voted for aNominee"	Transcript		show:				'The individual artist ' , aJuryMember nomineeName , ' has voted for ' , aNominee nomineeName , ' for the '						, awardCategory awardCategoryName , ' award category.';		cr.	juryVoteDico at: aJuryMember put: aNominee.	^ self! !!Jury methodsFor: 'initialization' stamp: 'NicolasOmer 8/10/2015 22:49'!initialize	"Initialize the juryMemberSet and juryVoteDico instance variables when instanciating a new Jury"	super initialize.	awardCategory := nil.	"Do not use AwardCategory new or it would loop since anAwardCategory consist of a Jury"	juryMemberSet := Set new.	juryVoteDico := Dictionary new! !!Jury methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:44'!includesJuryMember: aJuryMember	"Checks if a JuryMember belongs to the juryMemberSet"	^ self juryMemberSet includes: aJuryMember! !!Jury methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:44'!isVotingDone	"Checks if all JuryMembers voted"	^ self juryVoteDico size = 5! !!Jury methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:44'!hasJuryMemberVoted: aJuryMember	"Checks if a JuryMember has already voted"	^ self juryVoteDico includesKey: aJuryMember! !!Jury methodsFor: 'testing' stamp: 'NicolasOmer 8/10/2015 22:44'!isJuryFull	"Checks if the Jury has 5JuryMembers"	^ self juryMemberSet size = 5! !!Jury methodsFor: 'test - printing' stamp: 'NicolasOmer 8/12/2015 11:03'!printAttributes	"test - printing message"	Transcript		show: 'awardCategory : ' , self awardCategory awardCategoryName asString;		cr.	Transcript		show: 'juryMemberSet : ' , self juryMemberSet asArray asString;		cr.	Transcript		show: 'juryVoteDico : ' , self juryVoteDico asArray asString;		cr! !!Jury methodsFor: 'adding' stamp: 'NicolasOmer 8/11/2015 17:04'!addJuryMember: anIndividualArtist	"Adds anIndividualArtist to the juryMemberSet of the Jury"	"anIndividualArtist cannot be in the Jury of the award for which they are nominated"	(awardCategory includesNominee: anIndividualArtist)		ifTrue: [ 			Transcript				show:						'=> ERROR : The individual artist : ' , anIndividualArtist nomineeName , ' is nominated in the '								, awardCategory awardCategoryName , ' award category.';				cr.			^ self ].	(self includesJuryMember: anIndividualArtist)		ifTrue: [ 			Transcript				show:						'=> ERROR : The individual artist : ' , anIndividualArtist nomineeName , ' is already in the jury for the '								, awardCategory awardCategoryName , ' award category.';				cr.			^ self ].	self isJuryFull		ifTrue: [ 			Transcript				show: '=> ERROR : Jury has already 5 jury members';				cr.			^ self ].	"Otherwise, add him to the Jury"	anIndividualArtist addToJury: self.	^ self! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:16'!juryMemberSet: anObject	juryMemberSet := anObject! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:27'!juryVoteDico	^ juryVoteDico! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 17:05'!awardCategory	^ awardCategory! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/7/2015 17:05'!awardCategory: anObject	awardCategory := anObject! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:16'!juryMemberSet	^ juryMemberSet! !!Jury methodsFor: 'accessing' stamp: 'NicolasOmer 8/10/2015 22:27'!juryVoteDico: anObject	juryVoteDico := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jury class	instanceVariableNames: ''!!Jury class commentStamp: '<historical>' prior: 0!!!Jury class methodsFor: 'instance creation' stamp: 'NicolasOmer 8/10/2015 23:22'!forAwardCategory: anAwardCategory	| anObject |	anObject := self new		awardCategory: anAwardCategory;		yourself.	Transcript		show: 'Created a jury for ' , anObject awardCategory asString ;		cr.	anAwardCategory awardCategoryJury: anObject.	^ anObject! !